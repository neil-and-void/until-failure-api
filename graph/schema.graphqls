### TYPES ###
type User {
  id: ID!
  name: String!
  email: String!
}

type WorkoutRoutine {
  id: ID!
  name: String!
  exerciseRoutines: [ExerciseRoutine]
}

type ExerciseRoutine {
  id: ID!
  name: String!
  sets: Int!
  reps: Int!
}

type Workout {
  id: ID!
  workoutRoutine: WorkoutRoutine
  exercise: [Exercise]
}

type Exercise {
  id: ID!
  exerciseRoutine: ExerciseRoutine
  sets: [Set]
}

type Set {
  id: ID!
  set: Int!
  reps: Int!
}

type AuthError {
  message: String!
}

type AuthSuccess {
  refreshToken: String!
  accessToken: String!
}

union AuthResult = AuthError | AuthSuccess

type RefreshSuccess {
  accessToken: String!
}

### END TYPES ###

### INPUTS ###

input WorkoutRoutineInput {
  name: String!
  exerciseRoutines: [ExerciseRoutineInput]
}

input ExerciseRoutineInput {
  name: String!
  sets: Int!
  reps: Int!
}

### END INPUTS ###

type Query {
  workoutRoutines: [WorkoutRoutine]
  exerciseRoutines: [ExerciseRoutine]
}

type Mutation {
  login(email: String, password: String): AuthResult!
  signup(
    email: String
    name: String
    password: String
    confirmPassword: String
  ): AuthResult!
  refreshAccessToken(refreshToken: String): RefreshSuccess!
  createWorkoutRoutine(routine: WorkoutRoutineInput): WorkoutRoutine
}
